services:
  nginx:
    image: nginx:alpine
    container_name: ${PROJECT_NAME}_nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - api
      - front
    networks:
      - ${PROJECT_NAME}_network
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    container_name: ${PROJECT_NAME}_certbot
    restart: unless-stopped
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  api:
    image: ${PROJECT_NAME}_api_prod
    container_name: ${PROJECT_NAME}_api
    build:
      context: .
      dockerfile: ./docker/Dockerfile.prod
    env_file:
      - ./backend/.env.prod
    restart: always
    depends_on:
      - postgres
      - redis
    networks:
      - ${PROJECT_NAME}_network
    volumes:
      - ./backend/media:/home/app/backend/media
      - ./backend/static:/home/app/backend/static
    command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 4

  front:
    image: node:22.14.0-slim
    container_name: ${PROJECT_NAME}_front_build
    working_dir: /app
    command: bash -c "npm install -g pnpm && pnpm install && pnpm run build"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=https://${DOMAIN}/api
    volumes:
      - ./shadcn-admin:/app
      - ./frontend/dist:/app/dist
    profiles:
      - build

  postgres:
    container_name: ${PROJECT_NAME}_postgres
    image: postgis/postgis:16-3.4-alpine
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    networks:
      - ${PROJECT_NAME}_network
    volumes:
      - ./data/postgres:/var/lib/postgresql/data

  redis:
    container_name: ${PROJECT_NAME}_redis
    image: redis:7-alpine
    restart: always
    networks:
      - ${PROJECT_NAME}_network
    volumes:
      - ./data/redis:/data

  celery:
    image: ${PROJECT_NAME}_api_prod
    container_name: ${PROJECT_NAME}_celery
    restart: always
    env_file:
      - ./backend/.env.prod
    depends_on:
      - postgres
      - redis
    networks:
      - ${PROJECT_NAME}_network
    volumes:
      - ./backend:/home/app/backend
    command: celery -A config worker -l info

  celery-beat:
    image: ${PROJECT_NAME}_api_prod
    container_name: ${PROJECT_NAME}_celery_beat
    restart: always
    env_file:
      - ./backend/.env.prod
    depends_on:
      - postgres
      - redis
    networks:
      - ${PROJECT_NAME}_network
    volumes:
      - ./backend:/home/app/backend
    command: celery -A config beat -l info

networks:
  ${PROJECT_NAME}_network:
    driver: bridge 