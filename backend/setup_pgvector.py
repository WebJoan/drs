#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ PgVector –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å PgVector –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Agno.
"""

import os
import sys
import subprocess
import time
from typing import Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
if 'DJANGO_SETTINGS_MODULE' not in os.environ:
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_react_starter.settings.development')

def check_docker():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker"""
    try:
        result = subprocess.run(['docker', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω:", result.stdout.strip())
            return True
        else:
            print("‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except FileNotFoundError:
        print("‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def check_docker_compose():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Docker Compose"""
    try:
        result = subprocess.run(['docker-compose', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            print("‚úÖ Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω:", result.stdout.strip())
            return True
        else:
            # –ü—Ä–æ–±—É–µ–º docker compose (–Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å)
            result = subprocess.run(['docker', 'compose', 'version'], capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Docker Compose –¥–æ—Å—Ç—É–ø–µ–Ω:", result.stdout.strip())
                return True
            else:
                print("‚ùå Docker Compose –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
    except FileNotFoundError:
        print("‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False

def start_pgvector_container():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...")
    
    try:
        # –ü—Ä–æ–±—É–µ–º docker-compose
        result = subprocess.run(['docker-compose', 'up', '-d', 'pgvector'], capture_output=True, text=True)
        if result.returncode != 0:
            # –ü—Ä–æ–±—É–µ–º docker compose
            result = subprocess.run(['docker', 'compose', 'up', '-d', 'pgvector'], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: {str(e)}")
        return False

def wait_for_pgvector(max_attempts: int = 30) -> bool:
    """–ñ–¥–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PgVector"""
    print("\n‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PgVector...")
    
    for attempt in range(max_attempts):
        try:
            result = subprocess.run([
                'docker', 'exec', 'django_react_starter_pgvector',
                'pg_isready', '-U', 'ai', '-d', 'ai'
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print("‚úÖ PgVector –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                return True
            
        except Exception:
            pass
        
        print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
        time.sleep(2)
    
    print("‚ùå PgVector –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
    return False

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    required_vars = ['OPENROUTER_API_KEY']
    optional_vars = {
        'PGVECTOR_HOST': 'localhost',
        'PGVECTOR_PORT': '5532',
        'PGVECTOR_DB': 'ai',
        'PGVECTOR_USER': 'ai',
        'PGVECTOR_PASSWORD': 'ai'
    }
    
    all_good = True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: *** (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)")
        else:
            print(f"‚ùå {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            all_good = False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    print("\nüìã –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:")
    for var, default in optional_vars.items():
        value = os.getenv(var, default)
        print(f"   {var}: {value}")
    
    return all_good

def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector"""
    print("\nüîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector...")
    
    try:
        from pgvector_config import get_pgvector_db_url, validate_config
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not validate_config():
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            return False
        
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        from agno.vectordb.pgvector import PgVector
        
        vector_db = PgVector(
            table_name="setup_test",
            db_url=get_pgvector_db_url()
        )
        
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PgVector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        print(f"üìä URL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {get_pgvector_db_url()}")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {str(e)}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: uv sync")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
        return False

def test_basic_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å...")
    
    try:
        from agno.agent import Agent
        from agno.models.openai import OpenAIChat
        from agno.knowledge.text import TextKnowledgeBase
        from agno.vectordb.pgvector import PgVector
        from pgvector_config import get_pgvector_db_url
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        vector_db = PgVector(
            table_name="test_setup",
            db_url=get_pgvector_db_url()
        )
        
        knowledge_base = TextKnowledgeBase(
            sources=["–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã PgVector —Å Agno."],
            vector_db=vector_db
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        knowledge_base.load(recreate=True, upsert=True)
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = Agent(
            model=OpenAIChat(id="gpt-4o"),
            knowledge=knowledge_base,
            show_tool_calls=False,
            markdown=False
        )
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        print("ü§ñ –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å...")
        response = agent.run("–ß—Ç–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ?")
        
        if response:
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"üìù –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞: {str(response)[:100]}...")
            return True
        else:
            print("‚ùå –ê–≥–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
        return False

def show_usage_examples():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüìñ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")
    print("\n1. –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä:")
    print("   python pgvector_example.py")
    
    print("\n2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä:")
    print("   python pgvector_async_example.py")
    
    print("\n3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ Django:")
    print("   from pgvector_config import get_pgvector_db_url")
    print("   from agno.vectordb.pgvector import PgVector")
    
    print("\nüìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:")
    print("   –°–º–æ—Ç—Ä–∏—Ç–µ PGVECTOR_README.md –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    print("üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PgVector –¥–ª—è Agno")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
    if not check_docker():
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        return False
    
    if not check_docker_compose():
        print("\nüí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_ok = check_environment()
    if not env_ok:
        print("\nüí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export OPENROUTER_API_KEY='your_api_key_here'")
        print("\n–ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª backend/.env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:")
        print("OPENROUTER_API_KEY=your_api_key_here")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ª–∏ –±–µ–∑ API –∫–ª—é—á–∞
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ OPENROUTER_API_KEY? (—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ) [y/N]: ")
        if response.lower() != 'y':
            return False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if not start_pgvector_container():
        return False
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    if not wait_for_pgvector():
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_connection():
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á)
    if os.getenv('OPENROUTER_API_KEY'):
        if not test_basic_functionality():
            print("‚ö†Ô∏è  –ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –Ω–æ PgVector –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–Ω–µ—Ç OPENROUTER_API_KEY)")
    
    print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PgVector –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    show_usage_examples()
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        sys.exit(1)