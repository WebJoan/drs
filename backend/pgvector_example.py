#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PgVector —Å Agno –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏ –∑–Ω–∞–Ω–∏–π

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PgVector –∫–∞–∫ –≤–µ–∫—Ç–æ—Ä–Ω—É—é 
–±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤ Agno —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø–æ–∏—Å–∫–∞.
"""

import os
import sys
from typing import List, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
if 'DJANGO_SETTINGS_MODULE' not in os.environ:
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_react_starter.settings.development')
    
    import django
    django.setup()

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.knowledge.text import TextKnowledgeBase
from agno.vectordb.pgvector import PgVector, SearchType

from pgvector_config import (
    get_pgvector_db_url, 
    get_table_name,
    validate_config,
    AGNO_CONFIG,
    SEARCH_CONFIG
)

class PgVectorManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PgVector –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, table_name: str = "knowledge_base", search_type: str = "hybrid"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤
            search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (vector, text, hybrid)
        """
        self.db_url = get_pgvector_db_url()
        self.table_name = table_name
        self.search_type = getattr(SearchType, search_type, SearchType.hybrid)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.vector_db = PgVector(
            table_name=self.table_name,
            db_url=self.db_url,
            search_type=self.search_type,
            vector_score_weight=SEARCH_CONFIG["vector_score_weight"]
        )
    
    def create_agent_with_pdf_knowledge(self, pdf_urls: List[str]) -> Agent:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        
        Args:
            pdf_urls: –°–ø–∏—Å–æ–∫ URL PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            Agent: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        """
        knowledge_base = PDFUrlKnowledgeBase(
            urls=pdf_urls,
            vector_db=self.vector_db,
        )
        
        return Agent(
            model=OpenAIChat(id=AGNO_CONFIG["model_id"]),
            knowledge=knowledge_base,
            read_chat_history=True,
            show_tool_calls=AGNO_CONFIG["show_tool_calls"],
            markdown=AGNO_CONFIG["markdown"],
            debug_mode=AGNO_CONFIG["debug_mode"],
        )
    
    def create_agent_with_text_knowledge(self, texts: List[str]) -> Agent:
        """
        –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            
        Returns:
            Agent: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        """
        knowledge_base = TextKnowledgeBase(
            sources=texts,
            vector_db=self.vector_db,
        )
        
        return Agent(
            model=OpenAIChat(id=AGNO_CONFIG["model_id"]),
            knowledge=knowledge_base,
            read_chat_history=True,
            show_tool_calls=AGNO_CONFIG["show_tool_calls"],
            markdown=AGNO_CONFIG["markdown"],
            debug_mode=AGNO_CONFIG["debug_mode"],
        )

def example_recipes_agent():
    """
    –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –ê–≥–µ–Ω—Ç —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤ ===")
    
    if not validate_config():
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
    manager = PgVectorManager(
        table_name=get_table_name("recipes"),
        search_type="hybrid"
    )
    
    # URL —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã)
    pdf_urls = [
        "https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = manager.create_agent_with_pdf_knowledge(pdf_urls)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ)
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π —Ä–µ—Ü–µ–ø—Ç–æ–≤...")
        agent.knowledge.load(recreate=False, upsert=True)
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞:")
        agent.print_response(
            "–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–æ–º –∫—Ö–∞ –≥–∞–π (—Ç–∞–π—Å–∫–∏–π —Å—É–ø —Å –∫—É—Ä–∏—Ü–µ–π –∏ –∫–æ–∫–æ—Å–æ–≤—ã–º –º–æ–ª–æ–∫–æ–º)?", 
            stream=True
        )
        
        print("\n" + "="*50)
        agent.print_response(
            "–ö–∞–∫–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∞–¥ —Ç–∞–π?", 
            stream=True
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}")

def example_business_documents_agent():
    """
    –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: –ê–≥–µ–Ω—Ç —Å –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ ===")
    
    if not validate_config():
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    manager = PgVectorManager(
        table_name=get_table_name("documents"),
        search_type="vector"
    )
    
    # –ü—Ä–∏–º–µ—Ä—ã –±–∏–∑–Ω–µ—Å-—Ç–µ–∫—Å—Ç–æ–≤
    business_texts = [
        """
        –ù–∞—à–∞ –∫–æ–º–ø–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Django –∏ React. 
        –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –æ—Ç –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
        –û—Å–Ω–æ–≤–Ω—ã–µ —É—Å–ª—É–≥–∏: —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ API, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏,
        –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CI/CD –ø—Ä–æ—Ü–µ—Å—Å–æ–≤.
        """,
        """
        –¶–µ–Ω–æ–≤–∞—è –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏:
        - –ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –æ—Ç 100,000 —Ä—É–±/–º–µ—Å—è—Ü
        - –ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏: –æ—Ç 200,000 —Ä—É–±/–º–µ—Å—è—Ü
        - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ: 15,000 —Ä—É–±/—á–∞—Å
        - –°—Ä–æ—á–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏: +50% –∫ –±–∞–∑–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: 30,000 —Ä—É–±/–º–µ—Å—è—Ü
        """,
        """
        –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫:
        Backend: Django, Django REST Framework, Celery, PostgreSQL, Redis
        Frontend: React, TypeScript, Next.js, Tailwind CSS
        DevOps: Docker, Docker Compose, Nginx, GitHub Actions
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: Prometheus, Grafana, Sentry
        –ü–æ–∏—Å–∫: Meilisearch, Elasticsearch
        –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã: PgVector –¥–ª—è AI —Ñ—É–Ω–∫—Ü–∏–π
        """
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = manager.create_agent_with_text_knowledge(business_texts)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –±–∏–∑–Ω–µ—Å-–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        agent.knowledge.load(recreate=False, upsert=True)
        print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞:")
        agent.print_response(
            "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∞—à–∏ —É—Å–ª—É–≥–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?", 
            stream=True
        )
        
        print("\n" + "="*50)
        agent.print_response(
            "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–ª—è backend —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?", 
            stream=True
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–≥–µ–Ω—Ç–∞: {str(e)}")

def example_search_types():
    """
    –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–∏—Å–∫–∞
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞ ===")
    
    if not validate_config():
        return
    
    search_types = ["vector", "hybrid"]  # text –ø–æ–∏—Å–∫ —Ç—Ä–µ–±—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    
    for search_type in search_types:
        print(f"\n--- –¢–µ—Å—Ç–∏—Ä—É–µ–º {search_type} –ø–æ–∏—Å–∫ ---")
        
        try:
            manager = PgVectorManager(
                table_name=get_table_name("general"),
                search_type=search_type
            )
            
            # –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            texts = [
                "Python - —ç—Ç–æ –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
                "Django - —ç—Ç–æ –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è Python.",
                "React - —ç—Ç–æ JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.",
                "PostgreSQL - —ç—Ç–æ —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö.",
                "PgVector - —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ PostgreSQL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–∞–º–∏."
            ]
            
            agent = manager.create_agent_with_text_knowledge(texts)
            agent.knowledge.load(recreate=True, upsert=True)
            
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            agent.print_response("–†–∞—Å—Å–∫–∞–∂–∏ –æ Django", stream=True)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ {search_type}: {str(e)}")

def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
    """
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è PgVector —Å Agno")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    if not validate_config():
        print("\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export OPENROUTER_API_KEY='your_api_key_here'")
        print("export PGVECTOR_HOST='localhost'  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        print("export PGVECTOR_PORT='5532'       # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
        return
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector: {get_pgvector_db_url()}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    try:
        example_recipes_agent()
        example_business_documents_agent()
        example_search_types()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –°–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("- Hybrid –ø–æ–∏—Å–∫ –æ–±—ã—á–Ω–æ –¥–∞–µ—Ç –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        print("- –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ recreate=True")
        print("- –î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ upsert=True")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main()