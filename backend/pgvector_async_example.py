#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è PgVector —Å Agno

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É —Å PgVector –¥–ª—è –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã—Ö
–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
"""

import asyncio
import os
import time
from typing import List, Dict, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django (–µ—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
if 'DJANGO_SETTINGS_MODULE' not in os.environ:
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_react_starter.settings.development')
    
    import django
    django.setup()

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.knowledge.text import TextKnowledgeBase
from agno.vectordb.pgvector import PgVector, SearchType

from pgvector_config import (
    get_pgvector_db_url, 
    get_table_name,
    validate_config,
    AGNO_CONFIG,
    SEARCH_CONFIG
)

class AsyncPgVectorManager:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PgVector
    """
    
    def __init__(self, table_name: str = "async_knowledge", search_type: str = "hybrid"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        
        Args:
            table_name: –ò–º—è —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤
            search_type: –¢–∏–ø –ø–æ–∏—Å–∫–∞ (vector, text, hybrid)
        """
        self.db_url = get_pgvector_db_url()
        self.table_name = table_name
        self.search_type = getattr(SearchType, search_type, SearchType.hybrid)
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.vector_db = PgVector(
            table_name=self.table_name,
            db_url=self.db_url,
            search_type=self.search_type,
            vector_score_weight=SEARCH_CONFIG["vector_score_weight"]
        )
    
    async def create_agent_with_knowledge(self, texts: List[str]) -> Agent:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π
        
        Args:
            texts: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            
        Returns:
            Agent: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
        """
        knowledge_base = TextKnowledgeBase(
            sources=texts,
            vector_db=self.vector_db,
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        await knowledge_base.aload(recreate=False, upsert=True)
        
        return Agent(
            model=OpenAIChat(id=AGNO_CONFIG["model_id"]),
            knowledge=knowledge_base,
            read_chat_history=True,
            show_tool_calls=AGNO_CONFIG["show_tool_calls"],
            markdown=AGNO_CONFIG["markdown"],
            debug_mode=AGNO_CONFIG["debug_mode"],
        )
    
    async def create_pdf_agent(self, pdf_urls: List[str]) -> Agent:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        
        Args:
            pdf_urls: –°–ø–∏—Å–æ–∫ URL PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            
        Returns:
            Agent: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç
        """
        knowledge_base = PDFUrlKnowledgeBase(
            urls=pdf_urls,
            vector_db=self.vector_db,
        )
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º PDF
        await knowledge_base.aload(recreate=False, upsert=True)
        
        return Agent(
            model=OpenAIChat(id=AGNO_CONFIG["model_id"]),
            knowledge=knowledge_base,
            read_chat_history=False,  # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            show_tool_calls=False,    # –û—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            markdown=True,
        )

async def example_concurrent_queries():
    """
    –ü—Ä–∏–º–µ—Ä –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    print("=== –ü—Ä–∏–º–µ—Ä 1: –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ===")
    
    if not validate_config():
        return
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = AsyncPgVectorManager(
        table_name=get_table_name("concurrent"),
        search_type="hybrid"
    )
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    knowledge_texts = [
        "Python - —ç—Ç–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è.",
        "Django - —ç—Ç–æ –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ Python.",
        "React - —ç—Ç–æ JavaScript –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.",
        "PostgreSQL - —ç—Ç–æ –º–æ—â–Ω–∞—è —Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.",
        "PgVector - —ç—Ç–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ PostgreSQL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–∏—Å–∫–æ–º.",
        "Celery - —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –¥–ª—è Python –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
        "Redis - —ç—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –∫–∞–∫ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –∫–µ—à.",
        "Docker - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.",
        "Nginx - —ç—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∏ –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä.",
        "Git - —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –≤–µ—Ä—Å–∏–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ."
    ]
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        print("üìö –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å –±–∞–∑–æ–π –∑–Ω–∞–Ω–∏–π...")
        agent = await manager.create_agent_with_knowledge(knowledge_texts)
        print("‚úÖ –ê–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω!")
        
        # –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        questions = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ Django",
            "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç React?", 
            "–ß—Ç–æ —Ç–∞–∫–æ–µ PostgreSQL?",
            "–î–ª—è —á–µ–≥–æ –Ω—É–∂–µ–Ω Docker?",
        ]
        
        print(f"\nüöÄ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(questions)} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        tasks = []
        for i, question in enumerate(questions):
            task = process_question_async(agent, f"–í–æ–ø—Ä–æ—Å {i+1}", question)
            tasks.append(task)
        
        # –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        processing_time = end_time - start_time
        
        print(f"\n‚ö° –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {processing_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                print(f"‚ùå –í–æ–ø—Ä–æ—Å {i+1}: –û—à–∏–±–∫–∞ - {str(result)}")
            else:
                print(f"‚úÖ –í–æ–ø—Ä–æ—Å {i+1}: –û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö: {str(e)}")

async def process_question_async(agent: Agent, question_id: str, question: str) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
    
    Args:
        agent: –ê–≥–µ–Ω—Ç Agno
        question_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞
        question: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
        
    Returns:
        str: –û—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞
    """
    try:
        print(f"üîÑ {question_id}: {question}")
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = await agent.arun(question)
        
        print(f"‚úÖ {question_id}: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        return response.content if hasattr(response, 'content') else str(response)
        
    except Exception as e:
        print(f"‚ùå {question_id}: –û—à–∏–±–∫–∞ - {str(e)}")
        raise

async def example_multiple_agents():
    """
    –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã ===")
    
    if not validate_config():
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
        agents_config = [
            {
                "name": "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
                "table": "tech_agent",
                "texts": [
                    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ü–û, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º –∏ DevOps –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö.",
                    "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ —Ä–µ—à–µ–Ω–∏–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º.",
                ]
            },
            {
                "name": "–ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫", 
                "table": "business_agent",
                "texts": [
                    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–µ, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ø—Ä–æ–¥—É–∫—Ç—É –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è.",
                    "–ü–æ–º–æ–≥–∞—é –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤.",
                ]
            },
            {
                "name": "UX –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
                "table": "ux_agent", 
                "texts": [
                    "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ–ø—ã—Ç–µ, –¥–∏–∑–∞–π–Ω–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ –∏ —é–∑–∞–±–∏–ª–∏—Ç–∏.",
                    "–ü–æ–º–æ–≥–∞—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–¥–æ–±–Ω—ã–µ –∏ –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã.",
                ]
            }
        ]
        
        print("ü§ñ –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        agent_tasks = []
        for config in agents_config:
            manager = AsyncPgVectorManager(
                table_name=config["table"],
                search_type="vector"
            )
            task = manager.create_agent_with_knowledge(config["texts"])
            agent_tasks.append((config["name"], task))
        
        # –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
        agents = {}
        for name, task in agent_tasks:
            try:
                agents[name] = await task
                print(f"‚úÖ {name} –≥–æ—Ç–æ–≤")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {name}: {str(e)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        if agents:
            print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(agents)} –∞–≥–µ–Ω—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ...")
            
            test_tasks = [
                (agents["–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"], "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏?"),
                (agents["–ë–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫"], "–ö–∞–∫ –æ—Ü–µ–Ω–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞?"),
                (agents["UX –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"], "–ö–∞–∫–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –≤–∞–∂–Ω—ã –¥–ª—è —Ö–æ—Ä–æ—à–µ–≥–æ UX?"),
            ]
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            tasks = []
            for agent, question in test_tasks:
                task = agent.arun(question)
                tasks.append(task)
            
            start_time = time.time()
            responses = await asyncio.gather(*tasks, return_exceptions=True)
            end_time = time.time()
            
            print(f"\n‚ö° –í—Å–µ –∞–≥–µ–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
            
            for i, response in enumerate(responses):
                agent_name = list(agents.keys())[i]
                if isinstance(response, Exception):
                    print(f"‚ùå {agent_name}: –û—à–∏–±–∫–∞ - {str(response)}")
                else:
                    print(f"‚úÖ {agent_name}: –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏: {str(e)}")

async def example_batch_processing():
    """
    –ü—Ä–∏–º–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    print("\n=== –ü—Ä–∏–º–µ—Ä 3: –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ===")
    
    if not validate_config():
        return
    
    try:
        # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        documents = [
            f"–î–æ–∫—É–º–µ–Ω—Ç {i}: –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –Ω–æ–º–µ—Ä {i} —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–µ {i}. "
            f"–ü—Ä–æ–¥—É–∫—Ç –∏–º–µ–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ A{i}, B{i}, C{i} –∏ —Ü–µ–Ω—É {i*100} —Ä—É–±–ª–µ–π."
            for i in range(1, 11)
        ]
        
        print(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        manager = AsyncPgVectorManager(
            table_name=get_table_name("batch"),
            search_type="hybrid"
        )
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        batch_size = 3
        batches = [documents[i:i + batch_size] for i in range(0, len(documents), batch_size)]
        
        print(f"üì¶ –°–æ–∑–¥–∞–Ω–æ {len(batches)} –±–∞—Ç—á–µ–π –ø–æ {batch_size} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        batch_tasks = []
        for i, batch in enumerate(batches):
            task = process_batch_async(manager, f"–ë–∞—Ç—á {i+1}", batch)
            batch_tasks.append(task)
        
        start_time = time.time()
        batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)
        end_time = time.time()
        
        print(f"\n‚ö° –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        successful_batches = sum(1 for result in batch_results if not isinstance(result, Exception))
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–∞—Ç—á–µ–π: {successful_batches}/{len(batches)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")

async def process_batch_async(manager: AsyncPgVectorManager, batch_id: str, documents: List[str]) -> bool:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±–∞—Ç—á –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    
    Args:
        manager: –ú–µ–Ω–µ–¥–∂–µ—Ä PgVector
        batch_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞—Ç—á–∞
        documents: –°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
    Returns:
        bool: True –µ—Å–ª–∏ –±–∞—Ç—á –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ
    """
    try:
        print(f"üîÑ {batch_id}: –ó–∞–≥—Ä—É–∂–∞–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–∞—Ç—á–∞
        batch_manager = AsyncPgVectorManager(
            table_name=f"{manager.table_name}_{batch_id.lower().replace(' ', '_')}",
            search_type=manager.search_type.name
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        agent = await batch_manager.create_agent_with_knowledge(documents)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        test_response = await agent.arun(f"–°–∫–æ–ª—å–∫–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ {batch_id}?")
        
        print(f"‚úÖ {batch_id}: –û–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå {batch_id}: –û—à–∏–±–∫–∞ - {str(e)}")
        raise

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ PgVector —Å Agno")
    print("=" * 55)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not validate_config():
        print("\nüí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("export OPENROUTER_API_KEY='your_api_key_here'")
        return
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
    print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector: {get_pgvector_db_url()}")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        await example_concurrent_queries()
        await example_multiple_agents()
        await example_batch_processing()
        
        print("\n‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:")
        print("- –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö")
        print("- –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤")
        print("- –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –¥–ª—è high-load –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        print("- –ù–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    asyncio.run(main())