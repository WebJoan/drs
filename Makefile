.ONESHELL:
SHELL:= /bin/bash
.PHONY: test

BACKEND_DOCKER_EXEC=@docker exec -it django_react_starter_api
BACKEND_BASH_EXEC=$(BACKEND_DOCKER_EXEC) bash -c
FRONTEND_DOCKER_EXEC=@docker exec -it django_react_starter_front
FRONTEND_BASH_EXEC=$(FRONTEND_DOCKER_EXEC) bash -c

# Args
cmd=
env_file='.env'
opts=

# --------------------------------------------------
# Private
# --------------------------------------------------
_manage_py:
	$(BACKEND_BASH_EXEC) "\
		cd backend && \
		source $(env_file) && \
		python manage.py $(cmd) \
		$(opts)"

# --------------------------------------------------
# Backend
# --------------------------------------------------
backend.bash:
	$(BACKEND_DOCKER_EXEC) bash

backend.index_products:
	@$(MAKE) -s _manage_py cmd=index_products

backend.reindex_products:
	@$(MAKE) -s _manage_py cmd=reindex_products opts="--clear"

backend.makemigrations:
	@$(MAKE) -s _manage_py cmd=makemigrations

backend.migrate:
	@$(MAKE) -s _manage_py cmd=migrate
	@$(MAKE) -s _manage_py cmd=migrate env_file='.env.test'

backend.quality:
	$(BACKEND_BASH_EXEC) "cd backend \
		&& ruff check --select I . \
		&& ruff check . \
		&& ruff format --check . \
		&& ty check . --error-on-warning \

backend.shell:
	@$(MAKE) -s _manage_py cmd=shell

backend.create_currencies:
	@$(MAKE) -s _manage_py cmd=create_currencies	

backend.test:
	@$(MAKE) -s _manage_py cmd=test env_file='.env.test' opts="--parallel"

backend.test.coverage:
	$(BACKEND_BASH_EXEC) "\
		cd backend && \
		source .env.test && \
		coverage run --source='.' manage.py test --parallel && \
		coverage report && \
		coverage html"

backend.test_email_generation:
	$(BACKEND_BASH_EXEC) "\
		cd /home/drs && \
		source backend/.env && \
		python test_email_generation.py"

backend.run_agui_server:
	$(BACKEND_BASH_EXEC) "\
		cd backend && \
		python run_agui_server.py"

# --------------------------------------------------
# Frontend
# --------------------------------------------------
frontend.bash:
	$(FRONTEND_DOCKER_EXEC) bash

frontend.i18n:
	$(FRONTEND_BASH_EXEC) "yarn i18n"

frontend.quality:
	$(FRONTEND_BASH_EXEC) "yarn quality"

frontend.test:
	$(FRONTEND_BASH_EXEC) "yarn test"

frontend.test.coverage:
	$(FRONTEND_BASH_EXEC) "yarn test:coverage"


# --------------------------------------------------
# Docker
# --------------------------------------------------
start:
	@docker compose --profile=all up --build

start.fast:
	@docker compose --profile=all up

start.lite:
	@docker compose --profile=lite up --build

start.lite.fast:
	@docker compose --profile=lite up

stop:
	@docker compose --profile=all down


# --------------------------------------------------
# Others
# --------------------------------------------------
setup_hooks:
	@git config core.hooksPath .githooks

# Outputs is not aligned in IDE but will be in terminal
help:
	@echo "Usage: make [TARGET]"
	@echo ""
	@echo "----- BACKEND -------------------------------------------------------------------------"
	@echo "backend.bash:				Opens a bash session in the api container"
	@echo "backend.makemigrations:			Generates new migrations based on models"
	@echo "backend.migrate:			Runs the migration"
	@echo "backend.quality:			Runs ruff and ty"
	@echo "backend.shell: 				Opens the Django shell for the running instance"
	@echo "backend.test:				Runs tests"
	@echo "backend.test.coverage:			Runs tests and generates coverage report"
	@echo "backend.test_email_generation:		Tests AI email generation with Agno (debug)"
	@echo "----- FRONTEND ------------------------------------------------------------------------"
	@echo "frontend.bash: 				Opens a bash session in the frontend container"
	@echo "frontend.i18n: 				Runs i18n to generate translations"
	@echo "frontend.quality: 			Runs biome, tsc, and translation checks"
	@echo "frontend.test: 				Runs tests"
	@echo "frontend.test.coverage:			Runs tests and generates coverage report"
	@echo "----- DOCKER --------------------------------------------------------------------------"
	@echo "start: 					Starts all containers using docker compose"
	@echo "start.lite: 				Starts only dependencies containers using docker compose"
	@echo "					(postgres, rabbitmq, meilisearch, ...)"
	@echo "stop: 					Stops the containers using docker compose"
	@echo "----- PRODUCTION ----------------------------------------------------------------------"
	@echo "prod.deploy: 				üöÄ –ü–æ–ª–Ω—ã–π –¥–µ–ø–ª–æ–π –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞, SSL, –∑–∞–ø—É—Å–∫)"
	@echo "prod.setup: 				–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–∫—Ä—É–∂–µ–Ω–∏—è"
	@echo "prod.build: 				–°–±–æ—Ä–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –æ–±—Ä–∞–∑–æ–≤"
	@echo "prod.start: 				–ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "prod.stop: 				–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "prod.restart: 				–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "prod.update: 				–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
	@echo "prod.logs: 				–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"
	@echo "----- OTHERS --------------------------------------------------------------------------"
	@echo "setup_hooks: 				Setups the git pre-commit hooks"
	@echo "help: 					Prints this help message"

# --------------------------------------------------
# Production
# --------------------------------------------------
prod.setup:
	@chmod +x scripts/setup-prod.sh
	@chmod +x scripts/init-letsencrypt.sh
	@chmod +x scripts/setup-certs.sh
	@./scripts/setup-prod.sh

prod.ssl:
	@./scripts/init-letsencrypt.sh

prod.build:
	@docker compose -f docker-compose.prod.yml --env-file .env.prod build

prod.migrate:
	@docker compose -f docker-compose.prod.yml --env-file .env.prod run --rm api python backend/manage.py migrate
	@docker compose -f docker-compose.prod.yml --env-file .env.prod run --rm api python backend/manage.py collectstatic --noinput

prod.start:
	@docker compose -f docker-compose.prod.yml --env-file .env.prod up -d

prod.stop:
	@docker compose -f docker-compose.prod.yml --env-file .env.prod down

prod.logs:
	@docker compose -f docker-compose.prod.yml --env-file .env.prod logs -f

prod.deploy: prod.setup
	@echo "–°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤..."
	@$(MAKE) -s prod.build
	@echo "–°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
	@docker compose -f docker-compose.prod.yml --env-file .env.prod --profile build up front
	@echo "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@docker compose -f docker-compose.prod.yml --env-file .env.prod up -d postgres redis
	@sleep 5
	@echo "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	@$(MAKE) -s prod.migrate
	@echo "–ü–æ–ª—É—á–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞..."
	@$(MAKE) -s prod.ssl
	@echo "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@$(MAKE) -s prod.start
	@echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://$$(grep DOMAIN .env.prod | cut -d '=' -f2)"

prod.restart:
	@$(MAKE) -s prod.stop
	@$(MAKE) -s prod.start

prod.update:
	@git pull
	@$(MAKE) -s prod.build
	@docker compose -f docker-compose.prod.yml --env-file .env.prod --profile build up front
	@$(MAKE) -s prod.migrate
	@$(MAKE) -s prod.restart

# --------------------------------------------------
# SSL Certificates Management
# --------------------------------------------------

setup.certs:
	@echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@./scripts/setup-certs.sh

init.letsencrypt:
	@echo "üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@./scripts/init-letsencrypt.sh

renew.certs:
	@echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@./scripts/renew-certs.sh

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
start.with.certs:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤..."
	@echo "‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Let's Encrypt —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —É–∂–µ –ø–æ–ª—É—á–µ–Ω—ã (make init.letsencrypt)"
	@$(MAKE) -s setup.certs
	@$(MAKE) -s start

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Let's Encrypt (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
setup.production.ssl:
	@echo "üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ production SSL —Å Let's Encrypt..."
	@echo "‚ö†Ô∏è  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–æ–º–µ–Ω jiman.ru —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä!"
	@read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N) " confirm && [ "$$confirm" = "y" ] || exit 1
	@$(MAKE) -s init.letsencrypt

# ===== PGVECTOR COMMANDS =====

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ PgVector
setup.pgvector:
	@echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PgVector –¥–ª—è Agno..."
	@cd backend && python setup_pgvector.py

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
start.pgvector:
	@echo "üöÄ –ó–∞–ø—É—Å–∫ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	@docker-compose up -d pgvector

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
stop.pgvector:
	@echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
	@docker-compose stop pgvector

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ PgVector
logs.pgvector:
	@echo "üìã –õ–æ–≥–∏ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
	@docker-compose logs -f pgvector

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector —á–µ—Ä–µ–∑ psql
psql.pgvector:
	@echo "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
	@docker exec -it django_react_starter_pgvector psql -U ai -d ai

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PgVector
status.pgvector:
	@echo "üìä –°—Ç–∞—Ç—É—Å PgVector:"
	@docker-compose ps pgvector
	@echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:"
	@docker exec django_react_starter_pgvector pg_isready -U ai -d ai || echo "‚ùå PgVector –Ω–µ –≥–æ—Ç–æ–≤"

# –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö PgVector
reset.pgvector:
	@echo "üóëÔ∏è  –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö PgVector..."
	@read -p "–≠—Ç–æ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ PgVector. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N) " confirm && [ "$$confirm" = "y" ] || exit 1
	@docker-compose stop pgvector
	@docker-compose rm -f pgvector
	@sudo rm -rf ./data/pgvector
	@docker-compose up -d pgvector

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ PgVector
demo.pgvector:
	@echo "üéØ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ PgVector..."
	@cd backend && python pgvector_example.py

# –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ PgVector
demo.pgvector.async:
	@echo "‚ö° –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ PgVector..."
	@cd backend && python pgvector_async_example.py

# –ü–æ–ª–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PgVector (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ + –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ + —Ç–µ—Å—Ç)
init.pgvector: start.pgvector setup.pgvector demo.pgvector

# –ë—ç–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö PgVector
backup.pgvector:
	@echo "üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ PgVector..."
	@mkdir -p ./backups
	@docker exec django_react_starter_pgvector pg_dump -U ai -d ai > ./backups/pgvector_backup_$(shell date +%Y%m%d_%H%M%S).sql
	@echo "‚úÖ –ë—ç–∫–∞–ø —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ./backups/"

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö PgVector –∏–∑ –±—ç–∫–∞–ø–∞
restore.pgvector:
	@echo "üì• –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PgVector –∏–∑ –±—ç–∫–∞–ø–∞..."
	@ls -la ./backups/pgvector_backup_*.sql 2>/dev/null || (echo "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤ –≤ ./backups/" && exit 1)
	@read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞ (–±–µ–∑ –ø—É—Ç–∏): " backup_file && \
	 read -p "–≠—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ PgVector. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N) " confirm && [ "$$confirm" = "y" ] && \
	 docker exec -i django_react_starter_pgvector psql -U ai -d ai < ./backups/$$backup_file

# –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º PgVector
help.pgvector:
	@echo "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã PgVector:"
	@echo "  setup.pgvector      - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ PgVector"
	@echo "  start.pgvector      - –ó–∞–ø—É—Å–∫ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
	@echo "  stop.pgvector       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PgVector –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞"
	@echo "  logs.pgvector       - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ PgVector"
	@echo "  psql.pgvector       - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PgVector —á–µ—Ä–µ–∑ psql"
	@echo "  status.pgvector     - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ PgVector"
	@echo "  reset.pgvector      - –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö PgVector"
	@echo "  demo.pgvector       - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤"
	@echo "  demo.pgvector.async - –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤"
	@echo "  init.pgvector       - –ü–æ–ª–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PgVector"
	@echo "  backup.pgvector     - –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞"
	@echo "  restore.pgvector    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞"
