services:
  api:
    image: django_react_starter_api
    container_name: django_react_starter_api
    build:
      context: .
      dockerfile: ./docker/Dockerfile.dev
    env_file:
      - ./backend/.env
    depends_on:
      - postgres
      - rabbitmq
      - meilisearch
    networks:
      - django_react_starter_network
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/home/app/backend
      - ./logs:/home/app/logs
    profiles:
      - all
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/api/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
  front:
    image: node:22.14.0-slim
    container_name: django_react_starter_front
    working_dir: /app
    command: bash -c "apt-get update && apt-get install -y curl && npm install -g pnpm && pnpm install && pnpm run dev"
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
    networks:
      - django_react_starter_network
    ports:
      - "5173:5173"
    volumes:
      - ./shadcn-admin:/app
    profiles:
      - all

  postgres:
    container_name: django_react_starter_postgres
    image: postgis/postgis:16-3.4-alpine
    environment:
      - POSTGRES_USER=django_react_starter
      - POSTGRES_PASSWORD=django_react_starter
      - POSTGRES_DB=django_react_starter
    networks:
      - django_react_starter_network
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    profiles:
      - all
      - lite
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U django_react_starter"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: django_react_starter_rabbitmq
    image: rabbitmq:4.0.8-management
    environment:
      - RABBITMQ_DEFAULT_USER=django_react_starter
      - RABBITMQ_DEFAULT_PASS=django_react_starter
    networks:
      - django_react_starter_network
    ports:
      - "15672:15672"
      - "5672:5672"
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq/mnesia
    profiles:
      - all
      - lite
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  meilisearch:
    container_name: django_react_starter_meilisearch
    image: getmeili/meilisearch:v1.13.3
    environment:
      - MEILI_MASTER_KEY=@7t^a5xfv%9cg-oemhm0pi&fe6b=i7_v%dlikah^%0=z(hgqre
    networks:
      - django_react_starter_network
    ports:
      - "7700:7700"
    volumes:
      - ./data/meilisearch:/meili_data
    profiles:
      - all
      - lite
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgvector:
    container_name: django_react_starter_pgvector
    image: agnohq/pgvector:16
    environment:
      - POSTGRES_DB=ai
      - POSTGRES_USER=ai
      - POSTGRES_PASSWORD=ai
      - PGDATA=/var/lib/postgresql/data/pgdata
    networks:
      - django_react_starter_network
    ports:
      - "5532:5432"
    volumes:
      - ./data/pgvector:/var/lib/postgresql/data
    profiles:
      - all
      - lite
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai -d ai"]
      interval: 5s
      timeout: 5s
      retries: 5

  nginx:
    build: ./nginx
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/certs:/etc/nginx/certs
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    depends_on:
      api:
        condition: service_healthy
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      meilisearch:
        condition: service_healthy
    networks:
      - django_react_starter_network
    profiles:
      - all

  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: unless-stopped
    volumes:
      - ./data/certbot/conf:/etc/letsencrypt
      - ./data/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    profiles:
      - all

networks:
  django_react_starter_network:
    driver: bridge
