#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø–∏—Å–µ–º —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ Agno
"""
import os
import sys
import django

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –≤ PYTHONPATH
backend_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'backend')
sys.path.insert(0, backend_path)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'drs.settings')
django.setup()

try:
    from email_marketing.tasks import generate_ai_email_structured_task
    from user.models import User
    from person.models import Person
    from email_marketing.models import AiEmail
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Django –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)

def test_email_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é email —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –ø–∏—Å–µ–º —Å Agno")
    print("=" * 60)
    
    print("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π...")
    
    # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ sales –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        user = User.objects.filter(role='sales').first()
        if not user:
            user = User.objects.first()
            print(f"‚ö†Ô∏è  Sales –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–≥–æ: {user}")
        else:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω sales –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name}")
            
        if not user:
            print("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return
    
    # –ù–∞–π–¥–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    try:
        recipient = Person.objects.first()
        if not recipient:
            print("‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω–∫–µ Django")
            return
            
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient.get_full_name()} ({recipient.email})")
        if recipient.company:
            print(f"   –ö–æ–º–ø–∞–Ω–∏—è: {recipient.company.name}")
        else:
            print("   –ö–æ–º–ø–∞–Ω–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {e}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    if openrouter_key:
        print(f"‚úÖ OPENROUTER_API_KEY –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {openrouter_key[:10]}...{openrouter_key[-5:]}")
    else:
        print("‚ö†Ô∏è  OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   –ü–∏—Å—å–º–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ —Å fallback —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
    
    print("\nüìß –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–∏—Å—å–º–∞...")
    print("-" * 40)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–∏—Å—å–º–∞
    try:
        result = generate_ai_email_structured_task(
            user_id=user.id,
            recipient_id=recipient.id,
            context="–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π Agno. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.",
            tone='professional',
            purpose='offer'
        )
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        print(f"   Success: {result.get('success', False)}")
        print(f"   Email ID: {result.get('email_id', 'N/A')}")
        print(f"   Message: {result.get('message', 'N/A')}")
        
        if result.get('error'):
            print(f"‚ùå –û—à–∏–±–∫–∞: {result.get('error')}")
            
        if result.get('success'):
            email_id = result.get('email_id')
            subject = result.get('subject', 'N/A')
            
            print(f"\n‚úÖ –ü–∏—Å—å–º–æ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!")
            print(f"üìã ID –ø–∏—Å—å–º–∞: {email_id}")
            print(f"üì® –¢–µ–º–∞: {subject}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
            try:
                email = AiEmail.objects.get(id=email_id)
                print(f"\nüìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞:")
                print("=" * 60)
                print(f"–¢–µ–º–∞: {email.subject}")
                print("-" * 60)
                print(email.body)
                print("=" * 60)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–∞ –Ω–µ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω—ã
                body_lower = email.body.lower()
                if "–∏–≤–∞–Ω –∏–≤–∞–Ω–æ–≤" in body_lower or "–∏–≤–∞–Ω–æ–≤ –≤–ª–∞–¥" in body_lower:
                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞!")
                    print("   '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤' –∏–ª–∏ '–ò–≤–∞–Ω–æ–≤ –í–ª–∞–¥' –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è")
                else:
                    print("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                real_name_used = recipient.get_full_name().lower() in body_lower
                sender_name_used = (user.first_name.lower() in body_lower and 
                                   user.last_name.lower() in body_lower)
                
                print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏:")
                print(f"   ‚úÖ –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {real_name_used}")
                print(f"   ‚úÖ –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {sender_name_used}")
                
                if real_name_used and sender_name_used:
                    print("üéâ –û–¢–õ–ò–ß–ù–û: –ü–∏—Å—å–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
                else:
                    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π")
                
            except AiEmail.DoesNotExist:
                print(f"‚ùå –ü–∏—Å—å–º–æ —Å ID {email_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞: {e}")
                
        else:
            print("‚ùå –ü–∏—Å—å–º–æ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        print("\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        test_email_generation()
        print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()